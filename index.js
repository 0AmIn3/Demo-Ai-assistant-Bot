require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');

// –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
const { initDB } = require('./database/db');
const { cleanupUserStates } = require('./bot/utils/helpers');
const apiRoutes = require('./api/routes');
const { OWNER_USERNAME } = require('./config/constants');
// –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
const commands = require('./bot/handlers/commands');
const messages = require('./bot/handlers/messages');
const callbacks = require('./bot/handlers/callbacks');
const DeadlineScheduler = require('./bot/services/deadlineScheduler');
const statisticsService = require('./bot/services/statisticsService');
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const app = express();
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
initDB();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–µ—Å—Å–∏–∏
const userStates = {}; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const taskCreationSessions = {}; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á

// Middleware
app.use(express.json());

// –î–µ–ª–∞–µ–º bot –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è API —Ä–æ—É—Ç–æ–≤
app.set('telegramBot', bot);


const deadlineScheduler = new DeadlineScheduler(bot);



// API —Ä–æ—É—Ç—ã
app.use('/', apiRoutes);
``
bot.onText(/\/stats/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;

  if (username !== OWNER_USERNAME) {
    await bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É');
    return;
  }
  if (msg.chat.type !== 'private') {
    return;
  }
  await statisticsService.generateStatistics('30d', chatId, bot);
});

// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤
bot.onText(/\/deadlines/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;

  if (username !== OWNER_USERNAME) {
    await bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É');
    return;
  }
  if (msg.chat.type !== 'private') {
    return;
  }
  try {
    const tasks = await getAllTasksWithDeadlines();
    const now = new Date();

    const upcomingTasks = tasks.filter(task => {
      const dueDate = new Date(task.dueDate);
      const timeDiff = dueDate.getTime() - now.getTime();
      const daysDiff = timeDiff / (1000 * 60 * 60 * 24);
      return daysDiff <= 7 && daysDiff > 0;
    });

    const overdueTasks = tasks.filter(task => {
      const dueDate = new Date(task.dueDate);
      return dueDate < now;
    });

    let message = 'üìÖ *–û–±–∑–æ—Ä –¥–µ–¥–ª–∞–π–Ω–æ–≤*\n\n';

    if (overdueTasks.length > 0) {
      message += `üö® *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (${overdueTasks.length}):*\n`;
      overdueTasks.slice(0, 5).forEach((task, index) => {
        const dueDate = new Date(task.dueDate);
        const overdueDays = Math.floor((now - dueDate) / (1000 * 60 * 60 * 24));
        message += `${index + 1}. ${task.name} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ ${overdueDays}–¥)\n`;
      });
      message += '\n';
    }

    if (upcomingTasks.length > 0) {
      message += `‚è∞ *–ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã (${upcomingTasks.length}):*\n`;
      upcomingTasks.slice(0, 5).forEach((task, index) => {
        const dueDate = new Date(task.dueDate);
        const daysDiff = Math.floor((dueDate - now) / (1000 * 60 * 60 * 24));
        message += `${index + 1}. ${task.name} (—á–µ—Ä–µ–∑ ${daysDiff}–¥)\n`;
      });
    }

    if (overdueTasks.length === 0 && upcomingTasks.length === 0) {
      message += '‚úÖ –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é';
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'show_statistics' }],
          [{ text: '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏', callback_data: 'problem_tasks' }]
        ]
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö');
  }
});
bot.onText(/\/link/, (msg) => {
  const chatId = msg.chat.id;
console.log(fetchMainInviteLink(bot, chatId));

  // bot.sendMessage(chatId, `Here's the invite link: ${fetchMainInviteLink(bot, chatId)}`);
  // bot.exportChatInviteLink(chatId)
  //   .then((inviteLink) => {
  //     
  //   })
  //   .catch((error) => {
  //     console.error("Error exporting invite link:", error);
  //     bot.sendMessage(chatId, "Error creating invite link.");
  //   });
});

async function fetchMainInviteLink(bot, chatId) {
  const chat = await bot.getChat(chatId);
  console.log(chat);
       // Chat –æ–±—ä–µ–∫—Ç
  if (chat.invite_link) {
    console.log("Invite link already exists:", chat.invite_link);
    
    return chat.invite_link;                   // –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª–æ–º–∞–ª–∏
  }
  // —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞–¥–∏–º –µ—ë
  return await bot.exportChatInviteLink(chatId);
}
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
bot.onText(/\/owner_help/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;

  if (username !== OWNER_USERNAME) {
    await bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É');
    return;
  }
  if (msg.chat.type !== 'private') {
    return;
  }
  const helpMessage = `
üîß *–ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:*

üìä */stats* - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º
üìÖ */deadlines* - –û–±–∑–æ—Ä –¥–µ–¥–ª–∞–π–Ω–æ–≤  

üìã *–î–æ—Å—Ç—É–ø–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º –∏ —Å—Ç–∞—Ç—É—Å–∞–º
‚Ä¢ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–¥–∞—á

üîî *–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*
‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24—á, 6—á, 2—á –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç (9:00 –ø–æ –¢–∞—à–∫–µ–Ω—Ç—É)

‚öôÔ∏è *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
‚Ä¢ –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –ª–µ–π–±–ª—ã
‚Ä¢ –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á
`;

  await bot.sendMessage(chatId, helpMessage, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_statistics' },
          { text: 'üìÖ –î–µ–¥–ª–∞–π–Ω—ã', callback_data: 'show_deadlines' }
        ]
      ]
    }
  });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function getAllTasksWithDeadlines() {
  try {
    const plankaService = require('./bot/services/plankaService');
    const accessToken = await plankaService.getPlankaAccessToken();
    const axios = require('axios');

    const response = await axios.get(
      `${process.env.PLANKA_BASE_URL}/boards/${process.env.PLANKA_BOARD_ID}`,
      {
        headers: { Authorization: `Bearer ${accessToken}` }
      }
    );

    const cards = response.data.included.cards || [];
    const cardMemberships = response.data.included.cardMemberships || [];

    return cards
      .filter(card => card.dueDate && !card.isDueDateCompleted)
      .map(card => ({
        ...card,
        assignees: cardMemberships
          .filter(membership => membership.cardId === card.id)
          .map(membership => membership.userId)
      }))
      .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏:', error);
    return [];
  }
}



bot.onText(/\/chatinfo/, (msg) => {
  const chatId = msg.chat.id;

  const chatInfo = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:

**ID —á–∞—Ç–∞:** \`${chatId}\`
**–¢–∏–ø —á–∞—Ç–∞:** ${msg.chat.type}
**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${msg.chat.title || msg.chat.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
**Username:** @${msg.chat.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}

${msg.chat.type === 'group' ? ' –≠—Ç–æ –æ–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞' : ''}
${msg.chat.type === 'supergroup' ? ' –≠—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞' : ''}
${msg.chat.type === 'private' ? ' –≠—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç' : ''}`;

  bot.sendMessage(chatId, chatInfo, { parse_mode: 'Markdown' });
}); ``
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
commands.handleStartWithParam(bot, userStates);
commands.handleStart(bot);
commands.handleCreateTask(bot, userStates, taskCreationSessions);
commands.handleMyTasks(bot);
commands.handleSearchTasks(bot, userStates);
commands.handleDone(bot, userStates);
commands.handleHelp(bot);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
messages.handleMessages(bot, userStates, taskCreationSessions, openai);
messages.handleVoiceMessages(bot, userStates, taskCreationSessions, openai);
messages.handleDocuments(bot, userStates, taskCreationSessions);
messages.handlePhotos(bot, userStates, taskCreationSessions);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤
callbacks.handleCallbacks(bot, userStates, taskCreationSessions);

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(() => cleanupUserStates(userStates), 60 * 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

bot.on('error', (error) => {
  console.error('Bot error:', error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
  Object.keys(userStates).forEach(userId => {
    delete userStates[userId];
  });
});

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('Stopping bot...');
  bot.stopPolling();
  process.exit(0);
});

process.once('SIGTERM', () => {
  console.log('Stopping bot...');
  bot.stopPolling();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
  console.log('Telegram bot is running...');
});