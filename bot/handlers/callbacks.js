const { loadDB, saveDB } = require('../../database/db');
const { OWNER_USERNAME } = require('../../config/constants');
const { createAssigneeKeyboard } = require('../utils/keyboards');
const taskService = require('../services/taskService');
const { escapeMarkdown } = require('../utils/helpers');
const statisticsService = require('../services/statisticsService');
// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
function handleCallbacks(bot, userStates, taskCreationSessions) {
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const username = callbackQuery.from.username;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    const sessionId = Object.keys(taskCreationSessions).find(id =>
      taskCreationSessions[id].chatId === chatId &&
      taskCreationSessions[id].userId === userId
    );
    if (data === 'show_statistics') {
      if (username !== OWNER_USERNAME) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
        return;
      }

      await statisticsService.generateStatistics('30d', chatId, bot);
      await bot.answerCallbackQuery(callbackQuery.id);
      return;
    }
    try {
      if (data.startsWith('stats_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const period = data.replace('stats_', '');
        await statisticsService.generateStatistics(period, chatId, bot);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
      if (data === 'employee_stats') {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        await statisticsService.generateEmployeeStats(chatId, bot);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏
      if (data === 'problem_tasks') {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        await statisticsService.generateProblemTasks(chatId, bot);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö callback'–æ–≤
      if (data === 'show_my_tasks') {
        await taskService.showUserTasks(userId, chatId, bot);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }
      // –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
      if (data.startsWith('select_group_')) {
        const parts = data.split('_');
        const sessionId = parts[2];
        const groupId = parts[3];

        if (!taskCreationSessions[sessionId]) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å—Ç–µ–∫–ª–∞' });
          return;
        }

        const session = taskCreationSessions[sessionId];
        session.targetGroupId = groupId;

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
        let autoAssignedEmployee = null;
        let assigneeNotFoundMessage = null;

        if (session.analysis.assigneeInfo && session.analysis.assigneeInfo.mentioned) {
          autoAssignedEmployee = findAssigneeInDatabase(session.analysis.assigneeInfo, groupId);

          if (!autoAssignedEmployee) {
            assigneeNotFoundMessage = createAssigneeNotFoundMessage(session.analysis.assigneeInfo);
          }
        }

        session.autoAssignedEmployee = autoAssignedEmployee;
        session.assigneeNotFoundMessage = assigneeNotFoundMessage;

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–∑ Planka
        const lists = await plankaService.getPlankaLists();
        if (lists.length === 0) {
          await bot.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏ –∏–∑ Planka.', {
            chat_id: chatId,
            message_id: messageId
          });
          await bot.answerCallbackQuery(callbackQuery.id);
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞—Ç—É—Å–∞
        const escapedTitle = escapeMarkdown(session.analysis.title);
        const escapedDescription = escapeMarkdown(session.analysis.description);
        const escapedPriority = escapeMarkdown(session.analysis.priority);

        let messageText = `üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n` +
          `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: *${escapedTitle}*\n` +
          `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${escapedDescription}\n` +
          `‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${escapedPriority}\n`;

        if (autoAssignedEmployee) {
          messageText += `\n${createAssigneeFoundMessage(autoAssignedEmployee, session.analysis.assigneeInfo)}\n`;
        } else if (session.analysis.assigneeInfo && session.analysis.assigneeInfo.mentioned) {
          messageText += `\n‚ùì –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–ø–æ–º—è–Ω—É—Ç, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n`;
        }

        messageText += `\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏:`;

        await bot.editMessageText(messageText, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          disable_web_page_preview: true,
          reply_markup: createListSelectionKeyboard(lists)
        });

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }
      // –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏
      if (data.startsWith('view_task_')) {
        const cardId = data.replace('view_task_', '');
        await taskService.showTaskDetails(cardId, chatId, userId, false, bot);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
      if (data.startsWith('edit_task_')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' });
          return;
        }

        const cardId = data.replace('edit_task_', '');
        await taskService.showTaskDetails(cardId, chatId, userId, true, bot);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      if (data.startsWith('move_card_')) {
        const [, cardId, listId] = data.split('_').slice(1);

        try {
          const plankaService = require('../services/plankaService');
          await plankaService.moveCard(cardId, listId);

          // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
          const lists = await plankaService.getPlankaLists();
          const targetList = lists.find(list => list.id === listId);
          const listName = targetList?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';

          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
          await bot.editMessageText(
            `‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "${listName}"`,
            {
              chat_id: chatId,
              message_id: messageId
            }
          );

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
          await bot.editMessageText(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏',
            {
              chat_id: chatId,
              message_id: messageId
            }
          );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
      if (data.startsWith('refresh_task_')) {
        const cardId = data.replace('refresh_task_', '');
        await taskService.showTaskDetails(cardId, chatId, userId, false, bot);
        await bot.answerCallbackQuery(callbackQuery.id, { text: 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ' });
        return;
      }

      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
      if (data.startsWith('edit_name_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const cardId = data.replace('edit_name_', '');
        userStates[userId] = {
          state: 'editing_task',
          step: 'edit_name',
          cardId: cardId
        };

        await bot.sendMessage(chatId, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', {
          reply_markup: {
            inline_keyboard: [[
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_edit_name_${cardId}` }
            ]]
          }
        });
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
      if (data.startsWith('edit_desc_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const cardId = data.replace('edit_desc_', '');
        userStates[userId] = {
          state: 'editing_task',
          step: 'edit_description',
          cardId: cardId
        };

        await bot.sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', {
          reply_markup: {
            inline_keyboard: [[
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_edit_desc_${cardId}` }
            ]]
          }
        });
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏
      if (data.startsWith('manage_files_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const cardId = data.replace('manage_files_', '');
        await taskService.showFileManagement(cardId, chatId, messageId, bot);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
      if (data.startsWith('move_task_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const cardId = data.replace('move_task_', '');
        await taskService.showMoveTaskOptions(cardId, chatId, messageId, bot);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
      if (data.startsWith('delete_task_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const cardId = data.replace('delete_task_', '');
        await bot.editMessageText(
          '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!',
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_${cardId}` },
                  { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_delete_${cardId}` }
                ]
              ]
            }
          }
        );
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
      if (data.startsWith('confirm_delete_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const cardId = data.replace('confirm_delete_', '');
        await taskService.deleteTask(cardId, chatId, messageId, bot);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
      if (data.startsWith('cancel_delete_')) {
        const cardId = data.replace('cancel_delete_', '');
        await taskService.showTaskDetails(cardId, chatId, userId, true, bot);
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ' });
        return;
      }

      // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–≤–ª–∞–¥–µ–ª—å—Ü–µ–º)
      if (data.startsWith('owner_move_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const [cardId, listId] = data.split('_').slice(2);

        try {
          const plankaService = require('../services/plankaService');
          await plankaService.moveCard(cardId, listId);

          // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
          const lists = await plankaService.getPlankaLists();
          const targetList = lists.find(list => list.id === listId);
          const listName = targetList?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';

          // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
          await bot.editMessageText(
            `‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "${listName}"`,
            {
              chat_id: chatId,
              message_id: messageId,
              reply_markup: {
                inline_keyboard: [[
                  { text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `edit_task_${cardId}` }
                ]]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
          await bot.editMessageText(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏',
            {
              chat_id: chatId,
              message_id: messageId
            }
          );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏ (—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
      if (data.startsWith('close_task_')) {
        try {
          await bot.deleteMessage(chatId, messageId);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await bot.editMessageText(
            '‚úÖ –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã',
            {
              chat_id: chatId,
              message_id: messageId
            }
          );
        }
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫ –∑–∞–¥–∞—á–µ
      if (data.startsWith('add_file_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const cardId = data.replace('add_file_', '');
        userStates[userId] = {
          state: 'adding_files',
          cardId: cardId,
          attachments: []
        };

        await bot.sendMessage(chatId,
          'üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ.\n\n' +
          '–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /done',
          {
            reply_markup: {
              inline_keyboard: [[
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_add_file_${cardId}` }
              ]]
            }
          }
        );
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (data.startsWith('delete_file_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const attachmentId = data.replace('delete_file_', '');
        await taskService.deleteAttachmentTask(attachmentId, chatId, bot);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–∞–π–ª–∞–º–∏
      if (data.startsWith('back_to_files_')) {
        const cardId = data.replace('back_to_files_', '');
        await taskService.showFileManagement(cardId, chatId, messageId, bot);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }
      // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
      if (data.startsWith('cancel_edit_name_')) {
        const cardId = data.replace('cancel_edit_name_', '');
        delete userStates[userId];
        await bot.sendMessage(chatId, '‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ');
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
      if (data.startsWith('cancel_edit_desc_')) {
        const cardId = data.replace('cancel_edit_desc_', '');
        delete userStates[userId];
        await bot.sendMessage(chatId, '‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ');
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      if (data.startsWith('cancel_add_file_')) {
        const cardId = data.replace('cancel_add_file_', '');
        delete userStates[userId];
        await bot.sendMessage(chatId, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }
      // –í–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–¥–∞—á–∏
      if (data.startsWith('back_to_task_')) {
        const cardId = data.replace('back_to_task_', '');

        try {
          const plankaService = require('../services/plankaService');
          const card = await plankaService.getCard(cardId);
          if (!card) {
            await bot.editMessageText('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
              chat_id: chatId,
              message_id: messageId
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
          }

          const lists = await plankaService.getPlankaLists();
          const targetList = lists.find(list => list.id === card.listId);
          const listName = targetList?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';

          let message =
            `üìã *${escapeMarkdown(card.name)}*\n\n` +
            `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${escapeMarkdown(card.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n` +
            `üìÇ –°—Ç–∞—Ç—É—Å: ${escapeMarkdown(listName)}\n` +
            `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É: https://swifty.uz/cards/${cardId}\n`;

          if (card.dueDate) {
            const dueDate = new Date(card.dueDate);
            const now = new Date();
            const isOverdue = dueDate < now;
            const dateStr = dueDate.toLocaleDateString('ru-RU');
            const timeStr = dueDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

            if (isOverdue) {
              message += `‚è∞ *–°—Ä–æ–∫ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω):* ${dateStr} ${timeStr}\n`;
            } else {
              message += `üìÖ *–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${dateStr} ${timeStr}\n`;
            }
          }

          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          let keyboard = [];
          const isOwner = username === OWNER_USERNAME;

          if (isOwner) {
            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
            keyboard = [
              [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_name_${cardId}` }],
              [{ text: 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_desc_${cardId}` }],
              [{ text: '‚ö° –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', callback_data: `edit_priority_${cardId}` }],
              [{ text: '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫', callback_data: `edit_duedate_${cardId}` }],
              [{ text: 'üìé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏', callback_data: `manage_files_${cardId}` }],
              [{ text: 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: `move_task_${cardId}` }],
              [{ text: 'üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: `delete_task_${cardId}` }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è', callback_data: `close_task_${cardId}` }]
            ];
          } else {
            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞)
            keyboard = lists.map(list => ([{
              text: `‚û°Ô∏è ${list.name}`,
              callback_data: `move_card_${cardId}_${list.id}`
            }]));

            keyboard.unshift([{
              text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
              callback_data: `refresh_task_${cardId}`
            }]);

            keyboard.push([{
              text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å',
              callback_data: `close_task_${cardId}`
            }]);
          }

          await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            disable_web_page_preview: true,
            reply_markup: { inline_keyboard: keyboard }
          });

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ:', error);
          await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ', {
            chat_id: chatId,
            message_id: messageId
          });
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }
      // –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      if (data.startsWith('edit_priority_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const cardId = data.replace('edit_priority_', '');

        try {
          // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–π–±–ª—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
          const plankaService = require('../services/plankaService');
          const boardLabels = await plankaService.getBoardLabels();
          const priorityLabels = boardLabels.filter(label =>
            ['–≤—ã—Å–æ–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–Ω–∏–∑–∫–∏–π', 'high', 'medium', 'low', '—Å—Ä–æ—á–Ω–æ', 'urgent', 'critical', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'].some(priority =>
              label.name.toLowerCase().includes(priority)
            )
          );

          if (priorityLabels.length === 0) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ–π–±–ª–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞' });
            return;
          }

          // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
          const priorityKeyboard = priorityLabels.map(label => ([{
            text: `‚ö° ${label.name}`,
            callback_data: `set_priority_${cardId}_${label.id}`
          }]));

          priorityKeyboard.push([{
            text: '‚ùå –û—Ç–º–µ–Ω–∞',
            callback_data: `cancel_edit_priority_${cardId}`
          }]);

          await bot.editMessageText(
            '‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:',
            {
              chat_id: chatId,
              message_id: messageId,
              reply_markup: { inline_keyboard: priorityKeyboard }
            }
          );

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–π–±–ª–æ–≤:', error);
          const prompt = await bot.sendMessage(chatId, '‚ö° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (high/medium/low):', {
            reply_markup: {
              inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_edit_priority_${cardId}` }]]
            }
          });
          userStates[userId] = {
            state: 'editing_task',
            step: 'edit_priority',
            cardId,
            promptMessageId: prompt.message_id
          };
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }
      // –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —á–µ—Ä–µ–∑ –ª–µ–π–±–ª:
      if (data.startsWith('set_priority_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const parts = data.split('_');
        const cardId = parts[2];
        const labelId = parts[3];

        try {
          const plankaService = require('../services/plankaService');

          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–µ–π–±–ª—ã –∫–∞—Ä—Ç–æ—á–∫–∏
          const currentLabels = await plankaService.getCardLabels(cardId);

          // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –ª–µ–π–±–ª—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
          const boardLabels = await plankaService.getBoardLabels();
          const priorityLabels = boardLabels.filter(label =>
            ['–≤—ã—Å–æ–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–Ω–∏–∑–∫–∏–π', 'high', 'medium', 'low', '—Å—Ä–æ—á–Ω–æ', 'urgent', 'critical', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'].some(priority =>
              label.name.toLowerCase().includes(priority)
            )
          );

          for (const currentLabel of currentLabels) {
            const isPriorityLabel = priorityLabels.some(pLabel => pLabel.id === currentLabel.labelId);
            if (isPriorityLabel) {
              try {
                await plankaService.removeLabelFromCard(cardId, currentLabel.labelId);
              } catch (removeError) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ª–µ–π–±–ª–∞:', removeError);
              }
            }
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–µ–π–±–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
          await plankaService.addLabelToCard(cardId, labelId);

          // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–π–±–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const newLabel = boardLabels.find(label => label.id === labelId);
          const labelName = newLabel ? newLabel.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç';

          await bot.editMessageText(
            `‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ "${labelName}"`,
            {
              chat_id: chatId,
              message_id: messageId,
              reply_markup: {
                inline_keyboard: [[
                  { text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `edit_task_${cardId}` }
                ]]
              }
            }
          );

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:', error);
          await bot.editMessageText(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞',
            {
              chat_id: chatId,
              message_id: messageId,
              reply_markup: {
                inline_keyboard: [[
                  { text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `edit_task_${cardId}` }
                ]]
              }
            }
          );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }
      // –æ—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      if (data.startsWith('cancel_edit_priority_')) {
        const promptId = userStates[userId]?.promptMessageId;
        if (promptId) {
          try {
            await bot.deleteMessage(chatId, promptId);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–æ–¥—Å–∫–∞–∑–∫–∏:', error);
          }
        }
        delete userStates[userId];
        await bot.answerCallbackQuery(callbackQuery.id);
        await bot.sendMessage(chatId, '‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        return;
      }


      // –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      if (data.startsWith('edit_duedate_')) {
        if (username !== OWNER_USERNAME) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
          return;
        }

        const cardId = data.replace('edit_duedate_', '');
        const prompt = await bot.sendMessage(chatId, '‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:', {
          reply_markup: {
            inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_edit_duedate_${cardId}` }]]
          }
        });
        userStates[userId] = {
          state: 'editing_task',
          step: 'edit_duedate',
          cardId,
          promptMessageId: prompt.message_id
        };
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –æ—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–æ–∫–∞
      if (data.startsWith('cancel_edit_duedate_')) {
        const promptId = userStates[userId]?.promptMessageId;
        if (promptId) {
          try {
            await bot.deleteMessage(chatId, promptId);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–æ–¥—Å–∫–∞–∑–∫–∏:', error);
          }
        }
        delete userStates[userId];
        await bot.answerCallbackQuery(callbackQuery.id);
        await bot.sendMessage(chatId, '‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ');
        return;
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
      if (!sessionId) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å—Ç–µ–∫–ª–∞' });
        return;
      }

      const session = taskCreationSessions[sessionId];

      // –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
      if (data === 'cancel_task') {
        delete taskCreationSessions[sessionId];
        await bot.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
          chat_id: chatId,
          message_id: messageId
        });
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }


      // –í—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞
      // –í —Ñ—É–Ω–∫—Ü–∏–∏ callbacks –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–º–µ–Ω—è–µ–º:
      if (data.startsWith('select_list_')) {
        const listId = data.replace('select_list_', '');
        session.selectedListId = listId;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if (session.autoAssignedEmployee) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–π–ª–∞–º
          session.selectedAssigneeId = session.autoAssignedEmployee.plankaUserId;
          session.step = 'ask_files';

          await bot.editMessageText(
            `‚úÖ –°—Ç–∞—Ç—É—Å –≤—ã–±—Ä–∞–Ω!\n` +
            `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${session.autoAssignedEmployee.name}\n\n` +
            `–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –∑–∞–¥–∞—á–µ?`,
            {
              chat_id: chatId,
              message_id: messageId,
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üìé –î–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã', callback_data: 'add_files' }],
                  [{ text: '‚úÖ –ù–µ—Ç, —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'create_task_now' }],
                  [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_task' }]
                ]
              }
            }
          );
        } else {
          // –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ò–ó –í–°–ï–• –°–û–¢–†–£–î–ù–ò–ö–û–í
          session.step = 'select_assignee';

          // –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
          const db = loadDB();
          const employees = db.employees || [];

          const messageText = session.assigneeNotFoundMessage ||
            `‚úÖ –°—Ç–∞—Ç—É—Å –≤—ã–±—Ä–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏:`;

          await bot.editMessageText(
            messageText,
            {
              chat_id: chatId,
              message_id: messageId,
              reply_markup: createAssigneeKeyboard(employees)
            }
          );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      if (data.startsWith('select_assignee_')) {
        const assigneeId = data.replace('select_assignee_', '');
        session.selectedAssigneeId = assigneeId === 'none' ? null : assigneeId;
        session.step = 'ask_files';

        await bot.editMessageText(
          `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω!\n\n` +
          `–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –∑–∞–¥–∞—á–µ?`,
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìé –î–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã', callback_data: 'add_files' }],
                [{ text: '‚úÖ –ù–µ—Ç, —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'create_task_now' }],
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_task' }]
              ]
            }
          }
        );

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
      if (data === 'add_files') {
        session.step = 'waiting_files';
        session.attachments = [];

        await bot.editMessageText(
          `üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ.\n\n` +
          `–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"`,
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'create_task_now' }],
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_task' }]
              ]
            }
          }
        );

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      if (data === 'create_task_now') {
        await taskService.createPlankaTask(session, chatId, messageId, sessionId, taskCreationSessions, bot);
        await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
      await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
  });
}

module.exports = {
  handleCallbacks
};