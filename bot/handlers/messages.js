const fs = require('fs');
const axios = require('axios');
const os = require('os');
const { loadDB, saveDB } = require('../../database/db');
const { getOwnerUsername, OWNER_USERNAME } = require('../../config/constants');
const { hasActiveCreationSession, escapeMarkdown, generatePassword } = require('../utils/helpers');
const { validateEmail } = require('../utils/validation');
const { createListSelectionKeyboard } = require('../utils/keyboards');
const { analyzeMessageWithGemini } = require('../services/geminiService');
const { findAssigneeInDatabase, createAssigneeFoundMessage, createAssigneeNotFoundMessage } = require('../services/assigneeService');
const plankaService = require('../services/plankaService');
const taskService = require('../services/taskService');
const { employeeData } = require('./commands');
const { getChatInviteLink, fetchMainInviteLink } = require('../utils/invate');




// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
// –í —Ñ—É–Ω–∫—Ü–∏–∏ handleMessages —É–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
function handleMessages(bot, userStates, taskCreationSessions, openai) {
  bot.on('message', async (msg) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!msg.text || msg.text.startsWith('/') || !msg.from.username) {
      return;
    }

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const username = msg.from.username;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if (msg.chat.type === 'private') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
      if (userStates[userId]) {
        const state = userStates[userId];

        if (state.state === 'searching_tasks' && state.step === 'waiting_query') {
          await taskService.searchTasks(msg.text, chatId, bot, username);
          delete userStates[userId];
          return;
        }

        if (state.state === 'editing_task') {
          await taskService.handleTaskEditing(msg, state, bot);
          delete userStates[userId];
          return;
        }

        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
        if (state.state === 'creating_task' && state.step === 'waiting_message') {
          if (chatId !== (getOwnerUsername(chatId) || OWNER_USERNAME)) {
            await bot.sendMessage(chatId, '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É');
            delete userStates[userId];
            return;
          }

          await handleTaskCreationInPrivateChat(msg, state, bot, taskCreationSessions);
          delete userStates[userId];
          return;
        }
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      await handlePrivateMessage(msg, bot);
      return;
    }

    // –£–±–∏—Ä–∞–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
    // –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  });
}
async function handleTaskCreationInPrivateChat(msg, state, bot, taskCreationSessions) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username;

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ)
  const analysis = await analyzeMessageWithGemini(msg.text, username);
  if (!analysis) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  const sessionId = `${chatId}_${userId}_${Date.now()}`;

  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏–∑ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
  let autoAssignedEmployee = null;
  let assigneeNotFoundMessage = null;

  if (analysis.assigneeInfo && analysis.assigneeInfo.mentioned) {
    autoAssignedEmployee = findAssigneeInDatabase(analysis.assigneeInfo);

    if (!autoAssignedEmployee) {
      assigneeNotFoundMessage = createAssigneeNotFoundMessage(analysis.assigneeInfo);
    }
  }

  taskCreationSessions[sessionId] = {
    sessionId,
    chatId,
    userId,
    username,
    originalMessage: msg.text,
    analysis,
    step: 'select_list',
    createdAt: new Date(),
    autoAssignedEmployee,
    assigneeNotFoundMessage
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–∑ Planka
  const lists = await plankaService.getPlankaLists();
  if (lists.length === 0) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏ –∏–∑ Planka.');
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–∏—Å–∫–∞
  await sendTaskCreationMessage(analysis, lists, chatId, bot, autoAssignedEmployee, assigneeNotFoundMessage);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const db = loadDB();
  db.taskSessions = db.taskSessions || [];
  db.taskSessions.push({
    sessionId,
    ...taskCreationSessions[sessionId]
  });
  saveDB(db);
}
// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async function showGroupSelection(groups, chatId, bot, sessionId, analysis, taskCreationSessions) {
  const keyboard = groups.map(group => ([{
    text: group.groupTitle || `–ì—Ä—É–ø–ø–∞ ${group.telegramGroupId}`,
    callback_data: `select_group_${sessionId}_${group.telegramGroupId}`
  }]));

  keyboard.push([{
    text: '‚ùå –û—Ç–º–µ–Ω–∞',
    callback_data: 'cancel_task'
  }]);

  await bot.sendMessage(chatId,
    `üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n\n` +
    `üìù –ó–∞–¥–∞—á–∞: ${analysis.title}\n` +
    `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${analysis.description}\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:`,
    {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    }
  );
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async function sendTaskCreationMessage(analysis, lists, chatId, bot, autoAssignedEmployee, assigneeNotFoundMessage) {
  const escapedTitle = escapeMarkdown(analysis.title);
  const escapedDescription = escapeMarkdown(analysis.description);
  const escapedPriority = escapeMarkdown(analysis.priority);

  let messageText = `üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n` +
    `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: *${escapedTitle}*\n` +
    `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${escapedDescription}\n` +
    `‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${escapedPriority}\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
  if (analysis.assigneeInfo?.dueDate) {
    const dueDate = new Date(analysis.assigneeInfo.dueDate);
    const dateStr = dueDate.toLocaleDateString('ru-RU');
    const timeStr = dueDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    messageText += `üìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${dateStr} ${timeStr}\n`;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
  if (autoAssignedEmployee) {
    messageText += `\n${createAssigneeFoundMessage(autoAssignedEmployee, analysis.assigneeInfo)}\n`;
  } else if (analysis.assigneeInfo && analysis.assigneeInfo.mentioned) {
    messageText += `\n‚ùì –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–ø–æ–º—è–Ω—É—Ç, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n`;
  }

  messageText += `\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏:`;

  await bot.sendMessage(chatId, messageText, {
    parse_mode: 'Markdown',
    disable_web_page_preview: true,
    reply_markup: createListSelectionKeyboard(lists)
  });
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function handleVoiceMessages(bot, userStates, taskCreationSessions, openai) {
  bot.on('voice', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const username = msg.from.username;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (userStates[userId] && userStates[userId].state === 'creating_task' && userStates[userId].step === 'waiting_message') {
      await handleVoiceTaskCreation(msg, userId, chatId, username, userStates, taskCreationSessions, openai, bot);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
    if (chatId === (getOwnerUsername(chatId) || OWNER_USERNAME)) {
      await handleVoiceTaskCreation(msg, userId, chatId, username, userStates, taskCreationSessions, openai, bot);
    }
  });
}

// –í—ã–Ω–µ—Å–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
async function handleVoiceTaskCreation(msg, userId, chatId, username, userStates, taskCreationSessions, openai, bot) {
  try {
    const plankaService = require('../services/plankaService');

    // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∞–π–ª–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const fileId = msg.voice.file_id;
    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const response = await axios.get(fileUrl, { responseType: 'arraybuffer' });
    const audioBuffer = response.data;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const tempFilePath = `${os.tmpdir()}/voice_${Date.now()}.ogg`;
    fs.writeFileSync(tempFilePath, audioBuffer);
    console.log('–°—Ç–∞—Ä—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Gemini...');

    // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Gemini
    const transcribedText = await transcribeWithGemini(tempFilePath);

    if (!transcribedText) {
      fs.unlinkSync(tempFilePath);
      await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      return;
    }

    console.log('–ö–æ–Ω–µ—Ü —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Gemini...');
    console.log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', transcribedText);

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(tempFilePath);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —ç—Ç–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if (msg.chat.type !== 'private') {
      console.log('–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ)');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    const taskKeywords = ['–ø–æ–º–æ—â–Ω–∏–∫', '–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', '–µ—Ä–¥–∞–º—á–∏', 'pomoshnik', 'asistant', 'yordamchi', '—ë—Ä–¥–∞–º—á–∏', 'asistent'];
    const MessageText = transcribedText.toLowerCase().trim();
    const startsWithKeyword = taskKeywords.some(keyword => MessageText.startsWith(keyword));

    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (!startsWithKeyword && (!userStates[userId] || userStates[userId].state !== 'creating_task')) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü
    if (chatId !== (getOwnerUsername(chatId) || OWNER_USERNAME)) {
      await bot.sendMessage(chatId, '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É');
      return;
    }

    let cleanedText = transcribedText;
    if (startsWithKeyword) {
      // –£–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      cleanedText = transcribedText.replace(/^(–ø–æ–º–æ—â–Ω–∏–∫|–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç|–µ—Ä–¥–∞–º—á–∏|pomoshnik|asistant|yordamchi|—ë—Ä–¥–∞–º—á–∏|asistent)\s*/i, '').trim();

      if (!cleanedText) {
        await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.');
        return;
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Gemini –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ (–ë–ï–ó –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≥—Ä—É–ø–ø–µ)
    const analysis = await require('../services/geminiService').analyzeMessageWithGemini(cleanedText, username);
    if (!analysis) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    const sessionId = `${chatId}_${userId}_${Date.now()}`;

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏–∑ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
    let autoAssignedEmployee = null;
    let assigneeNotFoundMessage = null;

    if (analysis.assigneeInfo && analysis.assigneeInfo.mentioned) {
      autoAssignedEmployee = require('../services/assigneeService').findAssigneeInDatabase(analysis.assigneeInfo);

      if (!autoAssignedEmployee) {
        assigneeNotFoundMessage = require('../services/assigneeService').createAssigneeNotFoundMessage(analysis.assigneeInfo);
      }
    }

    taskCreationSessions[sessionId] = {
      sessionId,
      chatId,
      userId,
      username,
      originalMessage: cleanedText,
      analysis,
      step: 'select_list',
      createdAt: new Date(),
      autoAssignedEmployee,
      assigneeNotFoundMessage
    };

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–∑ Planka
    const lists = await plankaService.getPlankaLists();
    if (lists.length === 0) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏ –∏–∑ Planka.');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–∏—Å–∫–∞
    const { escapeMarkdown } = require('../utils/helpers');
    const { createListSelectionKeyboard } = require('../utils/keyboards');

    const escapedTitle = escapeMarkdown(analysis.title);
    const escapedDescription = escapeMarkdown(analysis.description);
    const escapedPriority = escapeMarkdown(analysis.priority);

    let messageText = `üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n` +
      `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: *${escapedTitle}*\n` +
      `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${escapedDescription}\n` +
      `‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${escapedPriority}\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (analysis.assigneeInfo?.dueDate) {
      const dueDate = new Date(analysis.assigneeInfo.dueDate);
      const dateStr = dueDate.toLocaleDateString('ru-RU');
      const timeStr = dueDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      messageText += `üìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${dateStr} ${timeStr}\n`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
    if (autoAssignedEmployee) {
      messageText += `\n${require('../services/assigneeService').createAssigneeFoundMessage(autoAssignedEmployee, analysis.assigneeInfo)}\n`;
    } else if (analysis.assigneeInfo && analysis.assigneeInfo.mentioned) {
      messageText += `\n‚ùì –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–ø–æ–º—è–Ω—É—Ç, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n`;
    }

    messageText += `\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏:`;

    await bot.sendMessage(chatId, messageText, {
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      reply_markup: createListSelectionKeyboard(lists)
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const db = require('../../database/db').loadDB();
    db.taskSessions = db.taskSessions || [];
    db.taskSessions.push({
      sessionId,
      ...taskCreationSessions[sessionId]
    });
    require('../../database/db').saveDB(db);

    // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    delete userStates[userId];

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
}
async function transcribeWithGemini(audioFilePath) {
  try {
    // –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    const audioBuffer = fs.readFileSync(audioFilePath);
    const base64Audio = audioBuffer.toString('base64');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –¥–ª—è .ogg —Ñ–∞–π–ª–æ–≤ (Telegram voice format)
    const mimeType = 'audio/ogg';

    const prompt = `
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —ç—Ç–æ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç. 
–°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ —É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–µ.
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:
- –£—á–∏—Ç—ã–≤–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –≤ —É–∑–±–µ–∫—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–∞—Ö
`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent?key=${process.env.GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [
            {
              text: prompt
            },
            {
              inline_data: {
                mime_type: mimeType,
                data: base64Audio
              }
            }
          ]
        }],
        generationConfig: {
          temperature: 0.1, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
          maxOutputTokens: 1000
        }
      })
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('–û—à–∏–±–∫–∞ Gemini API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', {
        status: response.status,
        statusText: response.statusText,
        error: errorData
      });
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Gemini:', JSON.stringify(data, null, 2));
      return null;
    }

    const candidate = data.candidates[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    if (candidate.finishReason === 'SAFETY') {
      console.error('–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
      return null;
    }

    if (!candidate.content.parts || !candidate.content.parts[0]) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç–µ Gemini');
      return null;
    }

    const transcribedText = candidate.content.parts[0].text;

    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    return transcribedText.trim();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Gemini:', {
      message: error.message,
      stack: error.stack
    });
    return null;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
function handleDocuments(bot, userStates, taskCreationSessions) {
  bot.on('document', async (msg) => {
    const userId = msg.from.id;

    if (userStates[userId] && userStates[userId].state === 'adding_files') {
      await taskService.handleFileForExistingTask(msg, 'document', userStates, bot);
      return;
    }

    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    await taskService.handleFileAttachment(msg, 'document', taskCreationSessions, bot);
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
function handlePhotos(bot, userStates, taskCreationSessions) {
  bot.on('photo', async (msg) => {
    const userId = msg.from.id;

    if (userStates[userId] && userStates[userId].state === 'adding_files') {
      await taskService.handleFileForExistingTask(msg, 'photo', userStates, bot);
      return;
    }

    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    await taskService.handleFileAttachment(msg, 'photo', taskCreationSessions, bot);
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function handlePrivateMessage(msg, bot) {
  const chatId = msg.chat.id;
  const data = employeeData[chatId];
  const username = msg.from.username;

  if (!data || !msg.text) {
    return;
  }

  switch (data.step) {
    case 'email':
      const email = msg.text.trim().toLowerCase();
      if (!validateEmail(email)) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:');
        return;
      }

      await bot.sendMessage(chatId, '‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à email –≤ —Å–∏—Å—Ç–µ–º–µ...');

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –≤ Planka
        const existingUser = await plankaService.findUserByEmail(email);

        if (existingUser) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Planka, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
          data.email = email;
          data.plankaUserId = existingUser.id;
          data.step = 'password';
          data.isExistingUser = true;

          await bot.sendMessage(chatId,
            `‚úÖ –í–∞—à email –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç Planka –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:`
          );
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
          data.email = email;
          data.step = 'name';
          data.isExistingUser = false;

          await bot.sendMessage(chatId,
            `üìù Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:`
          );
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email –≤ Planka:', error);
        await bot.sendMessage(chatId,
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        );
      }
      break;

    case 'password':
      if (!data.isExistingUser) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.');
        delete employeeData[chatId];
        return;
      }

      const password = msg.text.trim();
      if (password.length < 1) {
        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
        return;
      }

      await bot.sendMessage(chatId, '‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –ø–∞—Ä–æ–ª—å...');

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –≤ Planka
        const authResult = await plankaService.verifyUserPassword(data.email, password);

        if (authResult.success) {
          // –ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
          const userData = authResult.user || { email: data.email, id: data.plankaUserId };
          await completeExistingUserRegistration(data, userData, chatId, bot, username);
          delete employeeData[chatId];
        } else {
          await bot.sendMessage(chatId,
            `‚ùå ${authResult.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'}\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.`
          );
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è:', error);
        await bot.sendMessage(chatId,
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        );
      }
      break;

    case 'name':
      if (msg.text.trim().length < 2) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):');
        return;
      }
      data.name = msg.text.trim();
      data.step = 'position';
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:');
      break;

    case 'position':
      if (msg.text.trim().length < 2) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:');
        return;
      }
      data.position = msg.text.trim();
      await registerNewEmployee(data, chatId, bot);
      delete employeeData[chatId];
      break;
  }
}
async function registerNewEmployee(data, chatId, bot) {
  try {
    const db = loadDB();
    const owner = db.owners.find((o) => o.id === data.ownerId);

    if (!owner) {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const existingEmployee = db.employees.find(emp =>
      emp.email === data.email || emp.userId === data.userId
    );

    if (existingEmployee) {
      bot.sendMessage(chatId,
        `–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n` +
        `–ò–º—è: ${existingEmployee.name}\n` +
        `–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${existingEmployee.position}\n\n` +
        `–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: ${owner.inviteLink}`
      );
      return;
    }

    await bot.sendMessage(chatId, '‚è≥ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ...');

    const tempPassword = generatePassword();

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Planka
    const userData = {
      email: data.email,
      password: tempPassword,
      name: data.name,
      username: data.email.split('@')[0].substring(0, 11) + '_' + Date.now().toString().slice(-4),
    };

    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Planka:', { ...userData, password: '***' });

    const plankaUser = await plankaService.createPlankaUser(userData);
    const plankaUserId = plankaUser.id;
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID:', plankaUserId);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–æ—Å–∫–µ
    if (process.env.PLANKA_BOARD_ID) {
      try {
        await plankaService.addUserToBoard(plankaUserId);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –¥–æ—Å–∫–µ');
      } catch (boardError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–æ—Å–∫–µ:', boardError.response?.data || boardError.message);
        await bot.sendMessage(chatId, '‚ö†Ô∏è –í–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –¥–æ—Å–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const employeeRecord = {
      ...data,
      plankaUserId: String(plankaUserId),
      telegramUserId: String(data.userId),
      telegramChatId: String(chatId),
      registrationDate: new Date().toISOString(),
      groupId: String(owner.telegramGroupId),
      groupTitle: owner.groupTitle,
      plankaUsername: userData.username
    };

    db.employees.push(employeeRecord);
    saveDB(db);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
    await bot.sendMessage(chatId,
      `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
      `üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Planka:\n` +
      `‚Ä¢ Email: ${data.email}\n` +
      `‚Ä¢ –õ–æ–≥–∏–Ω: ${userData.username.replace(/_/g, '\\_')}\n` +
      `‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: \`${tempPassword}\`\n\n` +
      `‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ!\n` +
      `üîó –ê–¥—Ä–µ—Å Planka: https://swifty.uz/`,
      { parse_mode: 'Markdown', disable_web_page_preview: true }
    );

    const inviteLink = await fetchMainInviteLink(bot, owner.telegramGroupId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
    await bot.sendMessage(
      chatId,
      `üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ "${owner.groupTitle}":\n\n` +
      `${inviteLink}\n\n` +
      `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.`
    );

    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', data.email);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error.response?.data || error.message);

    let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.';
    if (error.response?.data?.message) {
      errorMessage += ` ${error.response.data.message}`;
    }
    errorMessage += ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';

    bot.sendMessage(chatId, errorMessage);
  }
}
// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function completeExistingUserRegistration(data, userData, chatId, bot, username) {
  try {
    const db = loadDB();
    const owner = db.owners.find((o) => o.id === data.ownerId);

    if (!owner) {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
    const existingEmployee = db.employees.find(emp =>
      emp.email === data.email || emp.userId === data.userId
    );

    const inviteLink = await fetchMainInviteLink(bot, owner.telegramGroupId);
    if (existingEmployee) {
      bot.sendMessage(chatId,
        `–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n` +
        `–ò–º—è: ${existingEmployee.name}\n` +
        `–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${existingEmployee.position}\n\n` +
        `–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: ${inviteLink}`
      );
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–æ—Å–∫–µ –≤ Planka (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
    if (process.env.PLANKA_BOARD_ID) {
      try {
        await plankaService.addUserToBoard(data.plankaUserId);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –¥–æ—Å–∫–µ');
      } catch (boardError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–æ—Å–∫–µ:', boardError.response?.data || boardError.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –¥–æ—Å–∫–µ
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
    const employeeRecord = {
      ...data,
      plankaUserId: String(data.plankaUserId),
      telegramUserId: String(data.userId),
      telegramChatId: String(chatId),
      registrationDate: new Date().toISOString(),
      groupId: String(owner.telegramGroupId),
      groupTitle: owner.groupTitle,
      name: data.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      username: username, 
    };

    db.employees.push(employeeRecord);
    saveDB(db);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await bot.sendMessage(chatId,
      `‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!\n\n` +
      `üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n` +
      `‚Ä¢ Email: ${data.email}\n` +
      `‚Ä¢ –ò–º—è: ${data.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.`
    );


    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
    await bot.sendMessage(chatId,
      `üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ "${owner.groupTitle}":\n\n` +
      `${inviteLink}\n\n` +
      `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.`
    );

    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', data.email);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
async function handleTaskCreationFromCommand(msg, state, bot, taskCreationSessions) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username;

  const db = loadDB();
  const owner = db.owners.find(o => o.telegramGroupId == chatId);
  if (!owner) {
    await bot.sendMessage(chatId, '‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');
    return;
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini
  const analysis = await analyzeMessageWithGemini(msg.text, username, chatId);
  if (!analysis) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  const sessionId = `${chatId}_${userId}_${Date.now()}`;

  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  let autoAssignedEmployee = null;
  let assigneeNotFoundMessage = null;

  if (analysis.assigneeInfo && analysis.assigneeInfo.mentioned) {
    autoAssignedEmployee = findAssigneeInDatabase(analysis.assigneeInfo, chatId);

    if (!autoAssignedEmployee) {
      assigneeNotFoundMessage = createAssigneeNotFoundMessage(analysis.assigneeInfo);
    }
  }

  taskCreationSessions[sessionId] = {
    sessionId,
    chatId,
    userId,
    username,
    originalMessage: msg.text,
    analysis,
    step: 'select_list',
    createdAt: new Date(),
    autoAssignedEmployee,
    assigneeNotFoundMessage
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–∑ Planka
  const lists = await plankaService.getPlankaLists();
  if (lists.length === 0) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏ –∏–∑ Planka.');
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–∏—Å–∫–∞
  const escapedTitle = escapeMarkdown(analysis.title);
  const escapedDescription = escapeMarkdown(analysis.description);
  const escapedPriority = escapeMarkdown(analysis.priority);

  let messageText = `üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n` +
    `üìù –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *${escapedTitle}*\n` +
    `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${escapedDescription}\n` +
    `‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${escapedPriority}\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
  if (analysis.assigneeInfo?.dueDate) {
    const dueDate = new Date(analysis.assigneeInfo.dueDate);
    const dateStr = dueDate.toLocaleDateString('ru-RU');
    const timeStr = dueDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    messageText += `üìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${dateStr} ${timeStr}\n`;
  }
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
  if (autoAssignedEmployee) {
    messageText += `\n${createAssigneeFoundMessage(autoAssignedEmployee, analysis.assigneeInfo)}\n`;
  } else if (analysis.assigneeInfo && analysis.assigneeInfo.mentioned) {
    messageText += `\n‚ùì –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–ø–æ–º—è–Ω—É—Ç, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n`;
  }

  messageText += `\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏:`;

  try {
    await bot.sendMessage(chatId, messageText, {
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      reply_markup: createListSelectionKeyboard(lists)
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  db.taskSessions = db.taskSessions || [];
  db.taskSessions.push({
    sessionId,
    ...taskCreationSessions[sessionId]
  });
  saveDB(db);
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ Planka –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
async function registerEmployee(data, chatId, bot) {
  try {
    const db = loadDB();
    const owner = db.owners.find((o) => o.id === data.ownerId);

    if (!owner) {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const existingEmployee = db.employees.find(emp =>
      emp.email === data.email || emp.userId === data.userId
    );

    if (existingEmployee) {
      bot.sendMessage(chatId,
        `–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n` +
        `–ò–º—è: ${existingEmployee.name}\n` +
        `–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${existingEmployee.position}\n\n` +
        `–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: ${owner.inviteLink}`
      );
      return;
    }

    await bot.sendMessage(chatId, '‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...');

    const tempPassword = generatePassword();

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Planka
    const userData = {
      email: data.email,
      password: tempPassword,
      name: data.name,
      username: data.email.split('@')[0].substring(0, 11) + '_' + Date.now().toString().slice(-4),
    };

    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Planka:', { ...userData, password: '***' });

    const plankaUser = await plankaService.createPlankaUser(userData);
    const plankaUserId = plankaUser.id;
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID:', plankaUserId);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–æ—Å–∫–µ
    if (process.env.PLANKA_BOARD_ID) {
      try {
        await plankaService.addUserToBoard(plankaUserId);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –¥–æ—Å–∫–µ');
      } catch (boardError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–æ—Å–∫–µ:', boardError.response?.data || boardError.message);
        await bot.sendMessage(chatId, '‚ö†Ô∏è –í–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –¥–æ—Å–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const employeeRecord = {
      ...data,
      plankaUserId: String(plankaUserId),
      telegramUserId: String(data.userId),
      telegramChatId: String(chatId),
      registrationDate: new Date().toISOString(),
      groupId: String(owner.telegramGroupId),
      groupTitle: owner.groupTitle,
      plankaUsername: userData.username
    };

    db.employees.push(employeeRecord);
    saveDB(db);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
    await bot.sendMessage(chatId,
      `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
      `üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Planka:\n` +
      `‚Ä¢ Email: ${data.email}\n` +
      `‚Ä¢ –õ–æ–≥–∏–Ω: ${userData.username.replace(/_/g, '\\_')}\n` +
      `‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: \`${tempPassword}\`\n\n` +
      `‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ!\n` +
      `üîó –ê–¥—Ä–µ—Å Planka: https://swifty.uz/`,
      { parse_mode: 'Markdown', disable_web_page_preview: true, }
    );

    const inviteLink = await fetchMainInviteLink(bot, owner.telegramGroupId);

    await bot.sendMessage(
      chatId,
      `üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ "${owner.groupTitle}":\n\n` +
      `${inviteLink}\n\n` +
      `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.`
    );

    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', data.email);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error.response?.data || error.message);

    let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.';
    if (error.response?.data?.message) {
      errorMessage += ` ${error.response.data.message}`;
    }
    errorMessage += ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';

    bot.sendMessage(chatId, errorMessage);
  }
}

module.exports = {
  handleMessages,
  handleVoiceMessages,
  handleDocuments,
  handlePhotos,
  handlePrivateMessage,
  handleTaskCreationFromCommand,
  registerEmployee,
  registerNewEmployee,
  completeExistingUserRegistration
};