const { loadDB, saveDB } = require('../../database/db');
const { getOwnerUsername, OWNER_USERNAME } = require('../../config/constants');
const { hasActiveCreationSession } = require('../utils/helpers');
const taskService = require('../services/taskService');
const plankaService = require('../services/plankaService');

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
const employeeData = {};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
function handleStartWithParam(bot, userStates) {
  bot.onText(/\/start (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const ownerId = match[1];

    if (!ownerId) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞.');
      return;
    }

    const db = loadDB();
    const owner = db.owners.find((o) => o.id === ownerId);
    if (!owner) {
      bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –∑–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π.');
      return;
    }

    employeeData[chatId] = {
      ownerId,
      step: 'email', // –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–ø—Ä–æ—Å–∞ email
      userId: msg.from.id,
      username: msg.from.username,
      firstName: msg.from.first_name,
      lastName: msg.from.last_name
    };

    bot.sendMessage(chatId,
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\n` +
      `–ì—Ä—É–ø–ø–∞: ${owner.groupTitle}\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:`
    );
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
function handleStart(bot) {
  bot.onText(/\/start$/, async (msg) => {
    const chatId = msg.chat.id;
    const isOwner = chatId === (getOwnerUsername(chatId) || OWNER_USERNAME);

    const keyboard = {
      inline_keyboard: [
        [{ text: 'ü§ñ –ü–æ–º–æ—â—å', callback_data: 'show_help' }],
        [{ text: 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'show_my_tasks' }],
        ...(isOwner ? [[{ text: 'üîß –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞', callback_data: 'owner_panel' }]] : [])
      ]
    };

    await bot.sendMessage(
      chatId,
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      { reply_markup: keyboard }
    );
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_task
function handleCreateTask(bot, userStates, taskCreationSessions) {
  bot.onText(/\/create_task/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;
    const userId = msg.from.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if (msg.chat.type !== 'private') {
      await bot.sendMessage(chatId, '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if (chatId !== (getOwnerUsername(chatId) || OWNER_USERNAME)) {
      await bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É');
      return;
    }

    if (hasActiveCreationSession(chatId, userId, userStates, taskCreationSessions)) {
      await bot.sendMessage(
        chatId,
        '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. ' +
        '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é.'
      );
      return;
    }

    userStates[userId] = {
      state: 'creating_task',
      step: 'waiting_message',
      commandMessageId: msg.message_id,
    };

    await bot.sendMessage(chatId,
      'üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.\n' +
      '–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂—É —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.'
    );
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_tasks
function handleMyTasks(bot) {
  bot.onText(/\/my_tasks/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (msg.chat.type !== 'private') {
      return;
    }

    await taskService.showUserTasks(userId, chatId, bot);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω)
function handleSearch(bot, userStates) {
  bot.onText(/\/search (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;
    const searchQuery = match[1];

    // –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –Ω–æ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
    if (msg.chat.type !== 'private') {
      return;
    }

    try {
      // –ü–µ—Ä–µ–¥–∞–µ–º username –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–Ω–æ–ø–æ–∫ (view/edit)
      await taskService.searchTasks(searchQuery, chatId, bot, username);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á');
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search_tasks
function handleSearchTasks(bot, userStates) {
  bot.onText(/\/search_tasks/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;

    if (msg.chat.type !== 'private') {
      return;
    }

    userStates[msg.from.id] = {
      state: 'searching_tasks',
      step: 'waiting_query'
    };

    await bot.sendMessage(chatId,
      'üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ ID):\n\n' +
      '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/search –≤–∞—à –∑–∞–ø—Ä–æ—Å`',
      { parse_mode: 'Markdown' }
    );
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /done
function handleDone(bot, userStates) {
  bot.onText(/\/done/, async (msg) => {
    const userId = msg.from.id;
    const chatId = msg.chat.id;

    await taskService.handleFilesCompletion(userId, chatId, userStates, bot);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
function handleHelp(bot) {
  bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;

    let helpMessage = '';

    if (msg.chat.type === 'private') {
      helpMessage =
        'ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n' +
        'üìã /my\\_tasks - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–¥–∞—á\n' +
        '‚ùì /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n';

      if (chatId === (getOwnerUsername(chatId) || OWNER_USERNAME)) {
        helpMessage +=
          'üîß *–ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:*\n\n' +
          'üìù /create\\_task - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n' +
          'üìä /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º\n' +
          'üìÖ /deadlines - –æ–±–∑–æ—Ä –¥–µ–¥–ª–∞–π–Ω–æ–≤\n' +
          'üîç /search\\_tasks - –ø–æ–∏—Å–∫ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á\n\n' +
          '*–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á:*\n' +
          '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create\\_task\n' +
          '‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n' +
          '‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ)\n' +
          '‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n' +
          '‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã\n\n';
      }

      helpMessage +=
        '*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n' +
        '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤–∞–º –∑–∞–¥–∞—á\n' +
        '‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏\n' +
        '‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö\n';

    } else {
      helpMessage =
        'ü§ñ *–ö–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ:*\n\n' +
        '‚ùì /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n';

      if (chatId === (getOwnerUsername(chatId) || OWNER_USERNAME)) {
        helpMessage +=
          'üîß *–ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:*\n' +
          'üìä /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º\n' +
          'üìÖ /deadlines - –æ–±–∑–æ—Ä –¥–µ–¥–ª–∞–π–Ω–æ–≤\n\n' +
          '‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º\n' +
          '–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create\\_task\n\n';
      } else {
        helpMessage +=
          '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.';
      }
    }

    await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
  });
}

module.exports = {
  employeeData,
  handleStartWithParam,
  handleStart,
  handleCreateTask,
  handleMyTasks,
  handleSearchTasks,
  handleDone,
  handleHelp
};