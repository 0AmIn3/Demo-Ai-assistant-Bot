const { getOwnerUsername, OWNER_USERNAME } = require('../../config/constants');

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @param {string} cardId - ID –∫–∞—Ä—Ç–æ—á–∫–∏
 * @param {string} username - Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object} –û–±—ä–µ–∫—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è inline_keyboard
 */
function createTaskViewButton(cardId, username) {
  const isOwner = cardId === (getOwnerUsername(cardId) || OWNER_USERNAME);

  return {
    text: isOwner ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É' : 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É',
    callback_data: isOwner ? `edit_task_${cardId}` : `view_task_${cardId}`
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∑–∞–¥–∞—á–µ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)
 * @param {string} cardId - ID –∫–∞—Ä—Ç–æ—á–∫–∏
 * @returns {Object} –û–±—ä–µ–∫—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è inline_keyboard
 */
function createTaskReturnButton(cardId) {
  return {
    text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É',
    callback_data: `view_task_${cardId}`
  };
}
// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —Å–∏–º–≤–æ–ª–æ–≤

function escapeMarkdown(text) {
  return text.replace(/([*_[\]()#+-.!\\])/g, '\\$1');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
function generatePassword(length = 12) {
  const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';
  let password = '';

  // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ–π –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞
  const letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const numbers = '0123456789';
  const special = '!@#$%^&*';

  password += letters.charAt(Math.floor(Math.random() * letters.length));
  password += numbers.charAt(Math.floor(Math.random() * numbers.length));
  password += special.charAt(Math.floor(Math.random() * special.length));

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
  for (let i = 3; i < length; i++) {
    password += charset.charAt(Math.floor(Math.random() * charset.length));
  }

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤ –ø–∞—Ä–æ–ª–µ
  return password.split('').sort(() => Math.random() - 0.5).join('');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
function hasActiveCreationSession(chatId, userId, userStates, taskCreationSessions) {
  if (userStates[userId]?.state === 'creating_task' &&
    userStates[userId].chatId === chatId) {
    return true;
  }

  return Object.values(taskCreationSessions).some(
    (s) => s.chatId === chatId && s.userId === userId
  );
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function cleanupUserStates(userStates) {
  const now = new Date();
  const oneHour = 60 * 60 * 1000;

  Object.keys(userStates).forEach(userId => {
    const state = userStates[userId];
    if (state.createdAt && (now - new Date(state.createdAt)) > oneHour) {
      delete userStates[userId];
    }
  });
}

module.exports = {
  escapeMarkdown,
  generatePassword,
  hasActiveCreationSession,
  cleanupUserStates,
  createTaskViewButton,
  createTaskReturnButton
};