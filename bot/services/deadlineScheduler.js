const cron = require('node-cron');
const { loadDB, saveDB } = require('../../database/db');
const { getOwnerUsername, OWNER_USERNAME  } = require('../../config/constants');
const plankaService = require('../services/plankaService');
const { escapeMarkdown } = require('../utils/helpers');
const axios = require('axios');

class DeadlineScheduler {
  constructor(bot) {
    this.bot = bot;
    this.init();
  }

  init() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    cron.schedule('*/30 * * * *', () => {
      this.checkDeadlines();
    });

    // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 9:00 –ø–æ –¢–∞—à–∫–µ–Ω—Ç—É (4:00 UTC)
    cron.schedule('0 4 * * *', () => {
      this.checkDailyDeadlines();
    });

    console.log('üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω');
  }

  async checkDeadlines() {
    try {
      const tasks = await this.getAllTasksWithDeadlines();
      const now = new Date();

      for (const task of tasks) {
        const dueDate = new Date(task.dueDate);
        const timeDiff = dueDate.getTime() - now.getTime();
        const hoursDiff = timeDiff / (1000 * 60 * 60);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        if (hoursDiff <= 24 && hoursDiff > 0) {
          await this.notifyEmployeeAboutDeadline(task, hoursDiff);
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        if (hoursDiff <= 0) {
          await this.notifyOwnerAboutOverdue(task, Math.abs(hoursDiff));
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤:', error);
    }
  }

  async checkDailyDeadlines() {
    try {
      const tasks = await this.getAllTasksWithDeadlines();
      const today = new Date();
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);

      const todayTasks = tasks.filter(task => {
        const dueDate = new Date(task.dueDate);
        return dueDate.toDateString() === today.toDateString();
      });

      const tomorrowTasks = tasks.filter(task => {
        const dueDate = new Date(task.dueDate);
        return dueDate.toDateString() === tomorrow.toDateString();
      });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–¥–∞—á–∞—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      if (todayTasks.length > 0) {
        await this.sendDailyDigest(todayTasks, '—Å–µ–≥–æ–¥–Ω—è');
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–¥–∞—á–∞—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞
      if (tomorrowTasks.length > 0) {
        await this.sendDailyDigest(tomorrowTasks, '–∑–∞–≤—Ç—Ä–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    }
  }

  async getAllTasksWithDeadlines() {
    try {
      const accessToken = await plankaService.getPlankaAccessToken();
      const response = await axios.get(
        `${process.env.PLANKA_BASE_URL}/boards/${process.env.PLANKA_BOARD_ID}`,
        {
          headers: { Authorization: `Bearer ${accessToken}` }
        }
      );

      const cards = response.data.included.cards || [];
      const cardMemberships = response.data.included.cardMemberships || [];

      return cards
        .filter(card => card.dueDate && !card.isDueDateCompleted)
        .map(card => ({
          ...card,
          assignees: cardMemberships
            .filter(membership => membership.cardId === card.id)
            .map(membership => membership.userId)
        }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏:', error);
      return [];
    }
  }

  async notifyEmployeeAboutDeadline(task, hoursLeft) {
    try {
      const db = loadDB();
      const key = `deadline_${task.id}_${Math.floor(hoursLeft)}h`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (db.sentNotifications && db.sentNotifications.includes(key)) {
        return;
      }

      for (const assigneeId of task.assignees) {
        const employee = db.employees.find(emp => emp.plankaUserId === assigneeId);
        if (!employee || !employee.userId) continue;

        const dueDate = new Date(task.dueDate);
        const timeLeft = this.formatTimeLeft(hoursLeft);

        let urgencyEmoji = '‚è∞';
        if (hoursLeft <= 2) urgencyEmoji = 'üö®';
        else if (hoursLeft <= 6) urgencyEmoji = '‚ö†Ô∏è';

        const message =
          `${urgencyEmoji} *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ!*\n\n` +
          `üìã *–ó–∞–¥–∞—á–∞:* ${escapeMarkdown(task.name)}\n` +
          `‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:* ${timeLeft}\n` +
          `üìÖ *–î–µ–¥–ª–∞–π–Ω:* ${dueDate.toLocaleString('ru-RU')}\n` +
          `üîó *–°—Å—ã–ª–∫–∞:* https://swifty.uz/cards/${task.id}`;

        await this.bot.sendMessage(employee.userId, message, {
          parse_mode: 'Markdown',
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[
              { text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `view_task_${task.id}` }
            ]]
          }
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (!db.sentNotifications) db.sentNotifications = [];
      db.sentNotifications.push(key);

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
      const weekAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);
      db.sentNotifications = db.sentNotifications.filter(notif => {
        const timestamp = notif.split('_').pop();
        return timestamp && parseInt(timestamp) > weekAgo;
      });

      saveDB(db);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ –¥–µ–¥–ª–∞–π–Ω–µ:', error);
    }
  }

  async notifyOwnerAboutOverdue(task, hoursOverdue) {
    try {
      const db = loadDB();
      const key = `overdue_${task.id}_${Math.floor(hoursOverdue / 24)}d`;

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
      if (db.sentNotifications && db.sentNotifications.includes(key)) {
        return;
      }

      const ownerEmployee = db.employees.find(emp => emp.username === (getOwnerUsername(null) || OWNER_USERNAME));
      if (!ownerEmployee || !ownerEmployee.userId) return;

      const dueDate = new Date(task.dueDate);
      const overdueTime = this.formatTimeLeft(hoursOverdue);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
      const assigneeNames = [];
      for (const assigneeId of task.assignees) {
        const employee = db.employees.find(emp => emp.plankaUserId === assigneeId);
        if (employee) assigneeNames.push(employee.name);
      }

      const message =
        `üö® *–ü–†–û–°–†–û–ß–ï–ù–ù–ê–Ø –ó–ê–î–ê–ß–ê!*\n\n` +
        `üìã *–ó–∞–¥–∞—á–∞:* ${escapeMarkdown(task.name)}\n` +
        `‚è∞ *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞:* ${overdueTime}\n` +
        `üìÖ *–î–µ–¥–ª–∞–π–Ω –±—ã–ª:* ${dueDate.toLocaleString('ru-RU')}\n` +
        `üë• *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:* ${assigneeNames.join(', ') || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã'}\n` +
        `üîó *–°—Å—ã–ª–∫–∞:* https://swifty.uz/cards/${task.id}`;

      await this.bot.sendMessage(ownerEmployee.userId, message, {
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `edit_task_${task.id}` }], // –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            [{ text: '‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω', callback_data: `edit_duedate_${task.id}` }],
          ]
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (!db.sentNotifications) db.sentNotifications = [];
      db.sentNotifications.push(key);
      saveDB(db);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ:', error);
    }
  }

  async sendDailyDigest(tasks, period) {
    try {
      const db = loadDB();
      const ownerEmployee = db.employees.find(emp => emp.username === (getOwnerUsername(null) || OWNER_USERNAME));
      if (!ownerEmployee || !ownerEmployee.userId) return;

      let message = `üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ ${period}* (${tasks.length})\n\n`;

      for (const [index, task] of tasks.entries()) {
        const dueDate = new Date(task.dueDate);
        const timeStr = dueDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

        message += `${index + 1}. ${escapeMarkdown(task.name)}\n`;
        message += `   ‚è∞ ${timeStr}\n\n`;
      }

      await this.bot.sendMessage(ownerEmployee.userId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'show_statistics' }
          ]]
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞:', error);
    }
  }

  formatTimeLeft(hours) {
    if (hours < 1) {
      const minutes = Math.floor(hours * 60);
      return `${minutes} –º–∏–Ω—É—Ç`;
    } else if (hours < 24) {
      const h = Math.floor(hours);
      const m = Math.floor((hours - h) * 60);
      return `${h}—á ${m}–º`;
    } else {
      const days = Math.floor(hours / 24);
      const remainingHours = Math.floor(hours % 24);
      return `${days}–¥ ${remainingHours}—á`;
    }
  }
}

module.exports = DeadlineScheduler;