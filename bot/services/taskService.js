const axios = require('axios');
const FormData = require('form-data');
const { loadDB, saveDB } = require('../../database/db');
const { escapeMarkdown } = require('../utils/helpers');
const plankaService = require('./plankaService');
const { createTaskReturnButton } = require('../utils/helpers');
const { OWNER_USERNAME } = require('../../config/constants')
// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserTasks(userId, chatId, bot) {
  try {
    const db = loadDB();
    const employee = db.employees.find(emp => emp.telegramUserId == userId);

    if (!employee) {
      await bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
      return;
    }

    const accessToken = await plankaService.getPlankaAccessToken();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–æ—Å–∫–∏ –≤–∫–ª—é—á–∞—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const response = await axios.get(
      `${process.env.PLANKA_BASE_URL}/boards/${process.env.PLANKA_BOARD_ID}`,
      {
        headers: { Authorization: `Bearer ${accessToken}` }
      }
    );

    if (!response.data || !response.data.included) {
      console.error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Planka:', response.data);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Planka');
      return;
    }

    const cards = response.data.included.cards || [];
    const cardMemberships = response.data.included.cardMemberships || [];
    const lists = response.data.included.lists || [];

    // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    const userCardIds = cardMemberships
      .filter(membership => membership.userId === employee.plankaUserId)
      .map(membership => membership.cardId);

    const userCards = cards.filter(card => userCardIds.includes(card.id));

    console.log('–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userCards.length);

    if (userCards.length === 0) {
      await bot.sendMessage(chatId, 'üìù –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–ø–∏—Å–∫–æ–≤
    const listMap = {};
    lists.forEach(list => {
      listMap[list.id] = list.name;
    });
    const isOwner = employee.username === OWNER_USERNAME;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
    const keyboard = userCards.map(card => ([{
      text: `${card.name} (${listMap[card.listId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'})`,
      callback_data: isOwner ? `edit_task_${card.id}` : `view_task_${card.id}`
    }]));

    const roleText = isOwner ? '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' : '–ø—Ä–æ—Å–º–æ—Ç—Ä–∞';
    await bot.sendMessage(chatId,
      `üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏ (${userCards.length}):\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è ${roleText}:`,
      { reply_markup: { inline_keyboard: keyboard } }
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á');
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
async function searchTasks(query, chatId, bot, username) {
  try {
    const accessToken = await plankaService.getPlankaAccessToken();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–æ—Å–∫–∏ –≤–∫–ª—é—á–∞—è –∫–∞—Ä—Ç–æ—á–∫–∏
    const response = await axios.get(
      `${process.env.PLANKA_BASE_URL}/boards/${process.env.PLANKA_BOARD_ID}`,
      {
        headers: { Authorization: `Bearer ${accessToken}` }
      }
    );


    if (!response.data || !response.data.included) {
      console.error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Planka:', response.data);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Planka');
      return;
    }

    const cards = response.data.included.cards || [];
    const lists = response.data.included.lists || [];

    console.log('–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫:', cards.length);
    console.log('–ù–∞–π–¥–µ–Ω–æ —Å–ø–∏—Å–∫–æ–≤:', lists.length);

    if (cards.length === 0) {
      await bot.sendMessage(chatId, 'üìù –ù–∞ –¥–æ—Å–∫–µ –Ω–µ—Ç –∑–∞–¥–∞—á');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–ø–∏—Å–∫–æ–≤
    const listMap = {};
    lists.forEach(list => {
      listMap[list.id] = list.name;
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    const filteredCards = cards.filter(card => {
      const searchText = query.toLowerCase();
      return (
        card.name.toLowerCase().includes(searchText) ||
        (card.description && card.description.toLowerCase().includes(searchText)) ||
        card.id.toString().includes(searchText)
      );
    });

    if (filteredCards.length === 0) {
      await bot.sendMessage(chatId, 'üîç –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const isOwner = username === OWNER_USERNAME;

    const keyboard = filteredCards.slice(0, 10).map(card => ([{
      text: `${card.name} (${listMap[card.listId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'})1`,
      callback_data: isOwner ? `edit_task_${card.id}` : `view_task_${card.id}`
    }]));

    if (filteredCards.length > 10) {
      keyboard.push([{
        text: `... –∏ –µ—â–µ ${filteredCards.length - 10} –∑–∞–¥–∞—á`,
        callback_data: 'search_more'
      }]);
    }

    const actionText = isOwner ? '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' : '–ø—Ä–æ—Å–º–æ—Ç—Ä–∞';
    await bot.sendMessage(chatId,
      `üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${filteredCards.length}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è ${actionText}:`,
      { reply_markup: { inline_keyboard: keyboard } }
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á');
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
async function showTaskDetails(cardId, chatId, userId, isOwner, bot) {
  try {
    const card = await plankaService.getCard(cardId);
    if (!card) {
      await bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const lists = await plankaService.getPlankaLists();
    const targetList = lists.find(list => list.id === card.listId);
    const listName = targetList.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';

    // –ü–æ–ª—É—á–∞–µ–º –ª–µ–π–±–ª—ã –∫–∞—Ä—Ç–æ—á–∫–∏
    let priorityText = '';
    try {
      const cardLabels = await plankaService.getCardLabels(cardId);
      if (cardLabels && cardLabels.length > 0) {
        const boardLabels = await plankaService.getBoardLabels();
        const cardLabelNames = cardLabels.map(cardLabel => {
          const label = boardLabels.find(l => l.id === cardLabel.labelId);
          return label ? label.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ª–µ–π–±–ª';
        });
        priorityText = `‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${cardLabelNames.join(', ')}\n`;
      }
    } catch (labelError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–π–±–ª–æ–≤ –∫–∞—Ä—Ç–æ—á–∫–∏:', labelError);
    }

    let message =
      `üìã *${escapeMarkdown(card.name)}*\n\n` +
      `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${escapeMarkdown(card.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n` +
      priorityText +  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
      `üìÇ –°—Ç–∞—Ç—É—Å: ${escapeMarkdown(listName)}\n` +
      `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É: https://swifty.uz/cards/${cardId}\n`;

    if (card.dueDate) {
      const dueDate = new Date(card.dueDate);
      const now = new Date();
      const isOverdue = dueDate < now;
      const dateStr = dueDate.toLocaleDateString('ru-RU');
      const timeStr = dueDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

      if (isOverdue) {
        message += `‚è∞ *–°—Ä–æ–∫ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω):* ${dateStr} ${timeStr}\n`;
      } else {
        message += `üìÖ *–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${dateStr} ${timeStr}\n`;
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let keyboard = [];

    if (isOwner) {
      // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
      keyboard = [
        [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_name_${cardId}` }],
        [{ text: 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_desc_${cardId}` }],
        [{ text: '‚ö° –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', callback_data: `edit_priority_${cardId}` }],
        [{ text: '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫', callback_data: `edit_duedate_${cardId}` }],
        [{ text: 'üìé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏', callback_data: `manage_files_${cardId}` }],
        [{ text: 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: `move_task_${cardId}` }],
        [{ text: 'üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: `delete_task_${cardId}` }],
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è', callback_data: `close_task_${cardId}` }]
      ];
    } else {
      // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞)
      keyboard = lists.filter(list => listName !== list.name).map(list => ([{
        text: `‚û°Ô∏è ${list.name}`,
        callback_data: `move_card_${cardId}_${list.id}`
      }]));

      keyboard.unshift([{
        text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        callback_data: `refresh_task_${cardId}`
      }]);

      keyboard.push([{
        text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è',
        callback_data: `close_task_${cardId}`
      }]);
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ');
  }
}

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
async function moveCardTask(cardId, listId, chatId, userId, bot) {
  try {
    await plankaService.moveCard(cardId, listId);

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
    const lists = await plankaService.getPlankaLists();
    const targetList = lists.find(list => list.id === listId);
    const listName = targetList?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';

    await bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "${listName}"`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await showTaskDetails(cardId, chatId, userId, false, bot);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async function handleTaskEditing(msg, state, bot) {
  const chatId = msg.chat.id;
  const cardId = state.cardId;
  const promptId = state.promptMessageId;     // id —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–æ–¥—Å–∫–∞–∑–∫–∏

  try {
    if (state.step === 'edit_name') {
      await plankaService.updateCard(cardId, { name: msg.text });

      if (promptId) {
        await bot.deleteMessage(chatId, promptId).catch(() => { });
      }

      await bot.sendMessage(chatId, '‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', {
        reply_markup: {
          inline_keyboard: [
            [createTaskReturnButton(cardId)],
          ],
        },
      });

    } else if (state.step === 'edit_description') {
      await plankaService.updateCard(cardId, { description: msg.text });

      if (promptId) {
        await bot.deleteMessage(chatId, promptId).catch(() => { });
      }

      await bot.sendMessage(chatId, '‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `edit_task_${cardId}` }],
          ],
        },
      });
    } else if (state.step === 'edit_priority') {
      const priority = msg.text.toLowerCase();

      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–π–±–ª—ã
        const boardLabels = await plankaService.getBoardLabels();
        const priorityInfo = plankaService.getPriorityFromLabels(boardLabels, priority);

        if (!priorityInfo) {
          await bot.sendMessage(chatId, '‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞.');
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–µ–π–±–ª—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        const currentLabels = await plankaService.getCardLabels(cardId);
        const priorityLabels = boardLabels.filter(label =>
          ['–≤—ã—Å–æ–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–Ω–∏–∑–∫–∏–π', 'high', 'medium', 'low', '—Å—Ä–æ—á–Ω–æ', 'urgent', 'critical', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'].some(p =>
            label.name.toLowerCase().includes(p)
          )
        );

        for (const currentLabel of currentLabels) {
          const isPriorityLabel = priorityLabels.some(pLabel => pLabel.id === currentLabel.labelId);
          if (isPriorityLabel) {
            try {
              await plankaService.removeLabelFromCard(cardId, currentLabel.labelId);
            } catch (removeError) {
              console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ª–µ–π–±–ª–∞:', removeError);
            }
          }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–µ–π–±–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        await plankaService.addLabelToCard(cardId, priorityInfo.labelId);

        if (promptId) {
          try {
            await bot.deleteMessage(chatId, promptId);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–æ–¥—Å–∫–∞–∑–∫–∏:', error);
          }
        }

        await bot.sendMessage(chatId, `‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ "${priorityInfo.labelName}"`, {
          reply_markup: {
            inline_keyboard: [[{ text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `edit_task_${cardId}` }]]
          }
        });

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞', {
          reply_markup: {
            inline_keyboard: [[{ text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `edit_task_${cardId}` }]]
          }
        });
      }
    }
    else if (state.step === 'edit_duedate') {
      // –ø–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "YYYY-MM-DD HH:MM"
      const parsed = msg.text.match(/^(\d{4}-\d{2}-\d{2})[ T](\d{2}:\d{2})$/);
      if (!parsed) {
        await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM');
        return;
      }
      const iso = new Date(parsed[1] + 'T' + parsed[2] + ':00').toISOString();
      await plankaService.updateCard(cardId, { dueDate: iso });
      if (promptId) await bot.deleteMessage(chatId, promptId).catch(() => { });
      const display = new Date(iso).toLocaleString('ru-RU', { dateStyle: 'short', timeStyle: 'short' });
      await bot.sendMessage(chatId, `‚úÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${display}`, {
        reply_markup: {
          inline_keyboard: [[{ text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `edit_task_${cardId}` }]]
        }
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏', {
      reply_markup: {
        inline_keyboard: [[
          { text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `edit_task_${cardId}` }
        ]]
      }
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
async function showFileManagement(cardId, chatId, messageId, bot) {
  try {
    const attachments = await plankaService.getCardAttachments(cardId);

    let message = 'üìé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏\n\n';

    if (attachments.length === 0) {
      message += '–§–∞–π–ª–æ–≤ –Ω–µ—Ç\n\n';
    } else {
      message += '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n';
      attachments.forEach((file, index) => {
        message += `${index + 1}. ${file.name}\n`;
      });
      message += '\n';
    }

    const keyboard = [
      [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã', callback_data: `add_file_${cardId}` }]
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    if (attachments.length > 0) {
      attachments.forEach(file => {
        keyboard.push([{
          text: `üóë –£–¥–∞–ª–∏—Ç—å "${file.name}"`,
          callback_data: `delete_file_${file.id}`
        }]);
      });
    }

    keyboard.push([
      { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ', callback_data: `back_to_task_${cardId}` },
      { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è', callback_data: `close_task_${cardId}` }
    ]);

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤');
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ü–∏–π –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async function showMoveTaskOptions(cardId, chatId, messageId, bot) {
  try {
    const lists = await plankaService.getPlankaLists();

    const keyboard = lists.map(list => ([{
      text: `‚û°Ô∏è ${list.name}`,
      callback_data: `owner_move_${cardId}_${list.id}`
    }]));

    keyboard.push([
      { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `back_to_task_${cardId}` },
      { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è', callback_data: `close_task_${cardId}` }
    ]);

    await bot.editMessageText(
      'üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏:',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: keyboard }
      }
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–≤');
  }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async function deleteTask(cardId, chatId, messageId, bot) {
  try {
    await plankaService.deleteCard(cardId);

    await bot.editMessageText(
      '‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
      {
        chat_id: chatId,
        message_id: messageId
      }
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    await bot.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏',
      {
        chat_id: chatId,
        message_id: messageId
      }
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è
async function deleteAttachmentTask(attachmentId, chatId, bot) {
  try {
    await plankaService.deleteAttachment(attachmentId);
    await bot.sendMessage(chatId, '‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Planka
async function createPlankaTask(session, chatId, messageId, sessionId, taskCreationSessions, bot) {
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    const cardData = {
      name: session.analysis.title,
      description: `${session.analysis.description}\n`,
      position: 1,
      isDueDateCompleted: false
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (session.analysis.assigneeInfo?.dueDate) {
      cardData.dueDate = session.analysis.assigneeInfo.dueDate;
    }

    const createdCard = await plankaService.createCard(session.selectedListId, cardData);
    const cardId = createdCard.id;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ª–µ–π–±–ª) –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
    if (session.analysis.priorityInfo && session.analysis.priorityInfo.labelId) {
      try {
        await plankaService.addLabelToCard(cardId, session.analysis.priorityInfo.labelId);
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω –ª–µ–π–±–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: ${session.analysis.priorityInfo.labelName}`);
      } catch (labelError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–µ–π–±–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:', labelError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ª–µ–π–±–ª –Ω–µ –¥–æ–±–∞–≤–∏–ª—Å—è
      }
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (session.selectedAssigneeId && session.selectedAssigneeId !== 'none') {
      try {
        await plankaService.assignCardMember(cardId, session.selectedAssigneeId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        await notifyAssignee(createdCard, session.selectedAssigneeId, bot);

      } catch (membershipError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', membershipError.response?.data || membershipError.message);
      }
    }

    // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª—ã
    if (session.attachments && session.attachments.length > 0) {
      for (let attachment of session.attachments) {
        try {
          const fileResponse = await axios.get(attachment.url, {
            responseType: 'stream'
          });

          const form = new FormData();
          form.append('file', fileResponse.data, attachment.name);
          form.append('name', attachment.name);

          const accessToken = await plankaService.getPlankaAccessToken();
          await axios.post(
            `${process.env.PLANKA_BASE_URL}/cards/${cardId}/attachments`,
            form,
            {
              headers: {
                ...form.getHeaders(),
                Authorization: `Bearer ${accessToken}`
              }
            }
          );
        } catch (attachmentError) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ "${attachment.name}":`,
            attachmentError.response?.data || attachmentError.message);
        }
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
    let message = `‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Planka!\n\n` +
      `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${session.analysis.title}\n`;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ –ª–µ–π–±–ª–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
    if (session.analysis.priorityInfo) {
      message += `‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${session.analysis.priorityInfo.labelName}\n`;
    } else {
      message += `‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${session.analysis.priority}\n`;
    }

    if (session.analysis.assigneeInfo.dueDate) {
      const dueDate = new Date(session.analysis.assigneeInfo.dueDate);
      const now = new Date();
      const isOverdue = dueDate < now;
      const dateStr = dueDate.toLocaleDateString('ru-RU');
      const timeStr = dueDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

      if (isOverdue) {
        message += `‚è∞ –°—Ä–æ–∫ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω): ${dateStr} ${timeStr}\n`;
      } else {
        message += `üìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${dateStr} ${timeStr}\n`;
      }
    }

    message += `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É: https://swifty.uz/cards/${cardId}\n`;

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      disable_web_page_preview: true
    });

    // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    delete taskCreationSessions[sessionId];

    const db = loadDB();
    db.taskSessions = db.taskSessions?.filter(s => s.sessionId !== sessionId) || [];
    db.taskHistory = db.taskHistory || [];
    db.taskHistory.push({
      sessionId,
      cardId,
      createdAt: new Date().toISOString(),
      creator: session.username,
      title: session.analysis.title,
      priority: session.analysis.priorityInfo?.labelName || session.analysis.priority,
      category: session.analysis.category
    });
    saveDB(db);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ Planka:', error.response?.data || error.message);

    let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏';
    if (error.response?.data?.message) {
      errorMessage += `: ${error.response.data.message}`;
    } else if (error.message) {
      errorMessage += `: ${error.message}`;
    }

    await bot.editMessageText(errorMessage, {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
async function notifyAssignee(cardData, assigneeId, bot) {
  if (!assigneeId) return;

  try {
    const db = loadDB();
    const employee = db.employees.find(emp => emp.plankaUserId == assigneeId);

    if (!employee || !employee.telegramChatId) {
      console.log('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∏–ª–∏ –Ω–µ—Ç Telegram ID');
      return;
    }

    let message =
      `üéØ *–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!*\n\n` +
      `üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${escapeMarkdown(cardData.name)}\n` +
      `üìã *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdown(cardData.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n`

    if (cardData.dueDate) {
      const dueDate = new Date(cardData.dueDate);
      const dateStr = dueDate.toLocaleDateString('ru-RU');
      const timeStr = dueDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      message += `üìÖ *–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${dateStr} ${timeStr}\n`;
    }
    message += `üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É:* https://swifty.uz/cards/${cardData.id}\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /my\\_tasks –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–¥–∞—á`;

    const isOwner = employee.username === OWNER_USERNAME;
    const taskButtonData = isOwner ? `edit_task_${cardData.id}` : `view_task_${cardData.id}`;
    const taskButtonText = isOwner ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É' : 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É';


    await bot.sendMessage(employee.telegramChatId, message, {
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[
          { text: 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'show_my_tasks' },
          { text: taskButtonText, callback_data: taskButtonData }
        ]]
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞—á
async function handleFileAttachment(msg, type, taskCreationSessions, bot) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
  const sessionId = Object.keys(taskCreationSessions).find(id =>
    taskCreationSessions[id].chatId === chatId &&
    taskCreationSessions[id].userId === userId &&
    taskCreationSessions[id].step === 'waiting_files'
  );

  if (!sessionId) return;

  const session = taskCreationSessions[sessionId];

  try {
    let fileId, fileName;

    if (type === 'document') {
      fileId = msg.document.file_id;
      fileName = msg.document.file_name;
    } else if (type === 'photo') {
      // –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
      const photo = msg.photo[msg.photo.length - 1];
      fileId = photo.file_id;
      fileName = `photo_${Date.now()}.jpg`;
    }

    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    session.attachments = session.attachments || [];
    session.attachments.push({
      name: fileName,
      url: fileUrl,
      size: file.file_size
    });

    await bot.sendMessage(chatId, `‚úÖ –§–∞–π–ª "${fileName}" –¥–æ–±–∞–≤–ª–µ–Ω!`);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
async function handleFileForExistingTask(msg, type, userStates, bot) {
  const userId = msg.from.id;
  const chatId = msg.chat.id;

  if (!userStates[userId] || userStates[userId].state !== 'adding_files') {
    return;
  }

  try {
    let fileId, fileName;

    if (type === 'document') {
      fileId = msg.document.file_id;
      fileName = msg.document.file_name;
    } else if (type === 'photo') {
      const photo = msg.photo[msg.photo.length - 1];
      fileId = photo.file_id;
      fileName = `photo_${Date.now()}.jpg`;
    }

    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    userStates[userId].attachments = userStates[userId].attachments || [];
    userStates[userId].attachments.push({
      name: fileName,
      url: fileUrl,
      size: file.file_size
    });

    await bot.sendMessage(chatId,
      `‚úÖ –§–∞–π–ª "${fileName}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!\n\n` +
      `–§–∞–π–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${userStates[userId].attachments.length}\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã`
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞');
  }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
async function handleFilesCompletion(userId, chatId, userStates, bot) {
  if (!userStates[userId] || userStates[userId].state !== 'adding_files') {
    return;
  }

  const state = userStates[userId];
  const cardId = state.cardId;

  if (!state.attachments || state.attachments.length === 0) {
    await bot.sendMessage(chatId, '‚ùå –§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã', {
      reply_markup: {
        inline_keyboard: [[
          { text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `edit_task_${cardId}` }
        ]]
      }
    });
    delete userStates[userId];
    return;
  }

  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫ –∑–∞–¥–∞—á–µ
    for (let attachment of state.attachments) {
      const fileResponse = await axios.get(attachment.url, {
        responseType: 'stream'
      });

      const form = new FormData();
      form.append('file', fileResponse.data, attachment.name);
      form.append('name', attachment.name);

      const accessToken = await plankaService.getPlankaAccessToken();
      await axios.post(
        `${process.env.PLANKA_BASE_URL}/cards/${cardId}/attachments`,
        form,
        {
          headers: {
            ...form.getHeaders(),
            Authorization: `Bearer ${accessToken}`
          }
        }
      );
    }

    await bot.sendMessage(chatId, `‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${state.attachments.length}`, {
      reply_markup: {
        inline_keyboard: [[
          { text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `edit_task_${cardId}` }
        ]]
      }
    });

    delete userStates[userId];

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤', {
      reply_markup: {
        inline_keyboard: [[
          { text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', callback_data: `edit_task_${cardId}` }
        ]]
      }
    });
    delete userStates[userId];
  }
}

module.exports = {
  showUserTasks,
  searchTasks,
  showTaskDetails,
  moveCardTask,
  handleTaskEditing,
  showFileManagement,
  showMoveTaskOptions,
  deleteTask,
  deleteAttachmentTask,
  createPlankaTask,
  notifyAssignee,
  handleFileAttachment,
  handleFileForExistingTask,
  handleFilesCompletion
};