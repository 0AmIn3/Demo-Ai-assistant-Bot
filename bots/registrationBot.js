// bots/registrationBot.js
const TelegramBot = require('node-telegram-bot-api');
const { loadDB, saveDB } = require('../database/db');
const { fetchMainInviteLink } = require('../bot/utils/invate');

const ADMINS = process.env.ADMINS
    ? process.env.ADMINS.split(',').map(id => id.trim())   // –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫‚ÄëID
    : [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ chatId
const isAdmin = chatId => ADMINS.includes(String(chatId));
const esc = s => (s || '').replace(/[_*[\]()~`>#+\-=|{}.!]/g, '\\$&');

/* helpers ----------------------------------------------------------- */
function buildUsersView() {
    const db = loadDB();
    if (!db.users?.length) return { text: '–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', keyboard: { inline_keyboard: [] } };

    const rows = db.users.map(u => [
        { text: `${u.name || '‚Äî'} ‚Äî @${u.username || '‚Äî'}`, callback_data: `sel_${u.chatId}` }
    ]);

    return { text: '*üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*', keyboard: { inline_keyboard: rows } };
}

function buildUserCard(u) {
    const db = loadDB();
    const ownerRec = db.owners.find(i => i.chatId === u.chatId);
    const linkLine = ownerRec
        ? `–°—Å—ã–ª–∫–∞: [${`https://t.me/demo_aiassistant_bot?start=${ownerRec.id}`}](https://t.me/demo_aiassistant_bot?start=${ownerRec.id})`
        : '';

    const txt =
        `*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*  
–ò–º—è:  ${esc(u.name)}  
Username: @${esc(u.username)}  
ID:  \`${u.chatId}\`
${linkLine}`;

    return {
        txt,
        kb: {
            inline_keyboard: [
                [{ text: u.isOwner ? 'üü¢ Owner' : '‚ö™Ô∏è Owner', callback_data: `own_${u.chatId}` }],
                [{ text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: `del_${u.chatId}` }],
                [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back' }]
            ]
        }
    };
}

/* init -------------------------------------------------------------- */
function initRegistrationBot(workBot, regToken) {
    const bot = new TelegramBot(regToken, { polling: true });

    /* –æ–±—ã—á–Ω—ã–π /start */
    bot.onText(/^\/start$/, (m) => {
        const db = loadDB();
        db.users = db.users || [];

        /* –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω */
        if (db.users.find(u => u.chatId === m.chat.id))
            return bot.sendMessage(m.chat.id, '‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');

        /* –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è */
        db.users.push({
            username: m.from.username ?? null,
            name: m.from.first_name ?? '‚Äî',
            chatId: m.chat.id,
            isOwner: false,
            createdAt: new Date().toISOString()
        });
        saveDB(db);

        bot.sendMessage(m.chat.id, 'üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

        /* –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ */
        const note =
            `üë§ *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è*
–ò–º—è:  ${esc(m.from.first_name)}
Username: @${esc(m.from.username || '‚Äî')}
ID:  \`${m.chat.id}\``;
        ADMINS.forEach(id => bot.sendMessage(id, note, { parse_mode: 'MarkdownV2' }));
    });

    /* —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */
    bot.onText(/^\/users$/, (m) => {
        if (!isAdmin(m.chat.id)) return;
        const { text, keyboard } = buildUsersView();
        bot.sendMessage(m.chat.id, text, { parse_mode: 'MarkdownV2', reply_markup: keyboard });
    });

    /* callback queries */
    bot.on('callback_query', async (cb) => {
        if (!isAdmin(cb.message.chat.id)) return bot.answerCallbackQuery(cb.id);

        const chatId = cb.message.chat.id;
        const messageId = cb.message.message_id;
        const db = loadDB();

        /* –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É */
        if (cb.data.startsWith('sel_')) {
            const uid = +cb.data.slice(4);
            const u = db.users.find(x => x.chatId === uid);
            if (u) {
                const { txt, kb } = buildUserCard(u);
                await bot.editMessageText(txt, { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: kb });
            }
            return bot.answerCallbackQuery(cb.id);
        }

        /* toggle owner -------------------------------------------------- */
        if (cb.data.startsWith('own_')) {
            const uid = +cb.data.slice(4);
            const user = db.users.find(x => x.chatId === uid);
            if (!user) return;

            user.isOwner = !user.isOwner;                    // –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
            db.owners = db.owners || [];

            if (user.isOwner) {
                /* –¥–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ */
                let ownerRec = db.owners.find(o => o.chatId === uid);
                if (!ownerRec) {
                    ownerRec = {
                        id: Date.now().toString(),           // —Ç–æ–∫–µ–Ω‚Äë–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                        telegramGroupId: "-1002765433923",
                        groupTitle: "Demo Assistant Group",
                        username: user.username,
                        chatId: uid,
                        createdAt: new Date().toISOString()
                    };
                    db.owners.push(ownerRec);
                }

                const inviteLink = await fetchMainInviteLink(workBot, "-1002765433923");
                /* —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É */
                const link = `https://t.me/demo\\_aiassistant\\_bot?start=${ownerRec.id}`;
                bot.sendMessage(uid,
 `üéâ *–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º!*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Å–≤–æ–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
${link}

‚ùóÔ∏è–ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–±—è, —Ç–æ–∂–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π –∂–µ —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.

–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É: ${inviteLink}`,
 { parse_mode: 'Markdown' });

            } else {
                /* —Å–Ω–∏–º–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ */
                db.owners = db.owners.filter(o => o.chatId !== uid);
            }

            saveDB(db);
            await bot.answerCallbackQuery(cb.id, { text: user.isOwner ? '–ù–∞–∑–Ω–∞—á–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º' : '–°–Ω—è—Ç' });

            const { txt, kb } = buildUserCard(user);
            return bot.editMessageText(txt, {
                chat_id: chatId, message_id: messageId,
                parse_mode: 'Markdown', reply_markup: kb
            });
        }

        /* delete user */
        if (cb.data.startsWith('del_')) {
            const uid = +cb.data.slice(4);
            db.users = db.users.filter(u => u.chatId !== uid);
            db.owners = (db.owners || []).filter(o => o.chatId !== uid);
            saveDB(db);
            await bot.answerCallbackQuery(cb.id, { text: '–£–¥–∞–ª—ë–Ω' });

            const { text, keyboard } = buildUsersView();
            return bot.editMessageText(text, { chat_id: chatId, message_id: messageId, parse_mode: 'MarkdownV2', reply_markup: keyboard });
        }

        /* back */
        if (cb.data === 'back') {
            await bot.answerCallbackQuery(cb.id);
            const { text, keyboard } = buildUsersView();
            return bot.editMessageText(text, { chat_id: chatId, message_id: messageId, parse_mode: 'MarkdownV2', reply_markup: keyboard });
        }
    });

    bot.onText(/^\/admin_help$/, (msg) => {
        if (!isAdmin(msg.chat.id)) return;
        bot.sendMessage(
            msg.chat.id,
            `*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞*

/users ‚Äî —Å–ø–∏—Å–æ–∫ & —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ  
/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
            { parse_mode: 'Markdown' }
        );
    });
    return bot;
}

module.exports = { initRegistrationBot };
